#include <iostream>
#include <algorithm>

void generatePuSizeDistribution(int frameHeight); // Ajdust the pointers of PU size distribution according to video resolution

extern float hitRate;

// These arrays store the accumulated occurrence rate of each PU size, starting with 64x64 and accumulating in direction of 4x4
// 1664p
float Res1664_PUs_Cumulative_4x4[26] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
float Res1664_PUs_Cumulative_8x8[26] = {0.999113360789027,0.99514568898473,0.988520529906673,0.97959094845871,0.972721538284785,0.96396594845871,0.954437946302318,0.93960822610294,0.930665940504809,0.918600974794966,0.906025854602659,0.889480190363405,0.865982815151301,0.857315381080316,0.879374756964084,0.901632428061369,0.912272430005655,0.921921176824096,0.931264250742365,0.940788275947398,0.947136595022625,0.958584691388574,0.971255810767816,0.981321806066176,0.992168499010181,0.99911805892758};
float Res1664_PUs_Cumulative_16x16[26] = {0.987969280260181,0.964545478648191,0.939111107183257,0.91033035209276,0.890646652290724,0.869495015554298,0.843882123161764,0.805007865526017,0.779505444004526,0.75265262655543,0.731010499151584,0.692816742081448,0.639599830316742,0.624741498161764,0.667742947539593,0.713598964225113,0.734520821549773,0.748125972143666,0.771635499151584,0.797401725113122,0.805693668693439,0.829431207579185,0.865719121182126,0.902232395361991,0.944625371182127,0.984163863068812};
float Res1664_PUs_Cumulative_32x32[26] = {0.918670460972851,0.842945772058824,0.791627191742081,0.739659926470588,0.711570277149321,0.680820489253393,0.624901018099547,0.57100360576923,0.52547016402715,0.488975890837104,0.465462386877828,0.417913956447964,0.358319782239819,0.354387019230769,0.391146422511312,0.446721224547511,0.477073317307692,0.487802248303168,0.515844174208145,0.547359304298642,0.549780825791855,0.56046733597285,0.605127615950226,0.675061863687783,0.760476173642534,0.871861126526082};
float Res1664_PUs_Cumulative_64x64[26] = {0.503662330316742,0.448140554298643,0.426923076923077,0.38631221719457,0.372426470588235,0.334855769230769,0.26327064479638,0.237259615384615,0.197242647058824,0.165844174208145,0.149441459276018,0.125742364253394,0.1055217760181,0.106865101809955,0.125049490950226,0.155620757918552,0.187139423076923,0.196556843891403,0.213595871040724,0.225572680995475,0.227679581447964,0.215547228506787,0.224519230769231,0.268827771493213,0.322921380090498,0.350291342952275};

int Res1664_MAX_DEPTH_PER_ROW[26] = {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4};

// 2048p
float Res2048_PUs_Cumulative_4x4[32] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
float Res2048_PUs_Cumulative_8x8[32] = {0.999113,0.996074,0.991488,0.984735,0.977932,0.972467,0.965381,0.95843,0.94767,0.93686,0.93003,0.92027,0.91016,0.89903,0.88279,0.86403,0.8567,0.8714,0.89231,0.90593,0.91344,0.92131,0.92878,0.93682,0.94304,0.94857,0.95815,0.96862,0.977164,0.985518,0.994044,0.999114};
float Res2048_PUs_Cumulative_16x16[32] = {0.987969,0.96902,0.94963,0.9266,0.90522,0.89002,0.87301,0.85463,0.82628,0.79728,0.77786,0.75583,0.73851,0.71566,0.67702,0.63567,0.62332,0.65222,0.69397,0.72273,0.73618,0.74704,0.76451,0.78751,0.80109,0.80798,0.82837,0.85735,0.88654,0.9181,0.95293,0.98416};
float Res2048_PUs_Cumulative_32x32[32] = {0.91867,0.8544,0.81126,0.76857,0.73134,0.71083,0.68753,0.64611,0.59935,0.55858,0.52273,0.49264,0.47389,0.44653,0.3987,0.35512,0.35253,0.37728,0.42042,0.46018,0.47877,0.48682,0.50683,0.5357,0.55059,0.54982,0.55962,0.59228,0.64362,0.70603,0.77953,0.87186};
float Res2048_PUs_Cumulative_64x64[32] = {0.50366,0.45349,0.43664,0.40973,0.3812,0.37192,0.34459,0.286,0.2483,0.22893,0.19459,0.16871,0.15472,0.13889,0.11849,0.10464,0.10587,0.11836,0.1395,0.16726,0.18928,0.19591,0.2089,0.22123,0.22802,0.22612,0.2158,0.21926,0.24707,0.29056,0.33146,0.35029};

int Res2048_MAX_DEPTH_PER_ROW[32] = {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4};


// These arrays store the occurrence rate of each PU size
// 1664p
float Res1664_PUs_Distribution_4x4[26] = {0.000886639210973,0.004854311015271,0.011479470093326,0.02040905154129,0.027278461715215,0.03603405154129,0.045562053697681,0.060391773897059,0.069334059495192,0.081399025205034,0.093974145397342,0.110519809636595,0.134017184848699,0.142684618919683,0.120625243035916,0.098367571938631,0.087727569994344,0.078078823175905,0.068735749257636,0.059211724052602,0.052863404977376,0.041415308611425,0.028744189232183,0.018678193933824,0.007831500989819,0.00088194107242};
float Res1664_PUs_Distribution_8x8[26] = {0.011144080528846,0.030600210336539,0.049409422723416,0.06926059636595,0.082074885994061,0.094470932904412,0.110555823140554,0.134600360576923,0.151160496500283,0.165948348239536,0.175015355451075,0.196663448281957,0.226382984834559,0.232573882918552,0.211631809424491,0.188033463836256,0.177751608455882,0.17379520468043,0.159628751590781,0.143386550834276,0.141442926329186,0.129153483809389,0.10553668958569,0.079089410704186,0.047543127828054,0.014954195858768};
float Res1664_PUs_Distribution_16x16[26] = {0.06929881928733,0.121599706589367,0.147483915441176,0.170670425622172,0.179076375141403,0.188674526300905,0.218981105062217,0.234004259756787,0.254035279977376,0.263676735718326,0.265548112273756,0.274902785633484,0.281280048076923,0.270354478930995,0.276596525028281,0.266877739677602,0.257447504242081,0.260323723840498,0.255791324943439,0.25004242081448,0.255912842901584,0.268963871606335,0.2605915052319,0.227170531674208,0.184149197539593,0.11230273654273};
float Res1664_PUs_Distribution_32x32[26] = {0.415008130656109,0.394805217760181,0.364704114819004,0.353347709276018,0.339143806561086,0.345964720022624,0.361630373303167,0.333743990384615,0.328227516968326,0.323131716628959,0.31602092760181,0.29217159219457,0.252798006221719,0.247521917420814,0.266096931561086,0.291100466628959,0.289933894230769,0.291245404411765,0.302248303167421,0.321786623303167,0.322101244343891,0.344920107466063,0.380608385180995,0.40623409219457,0.437554793552036,0.521569783573807};
float Res1664_PUs_Distribution_64x64[26] = {0.503662330316742,0.448140554298643,0.426923076923077,0.38631221719457,0.372426470588235,0.334855769230769,0.26327064479638,0.237259615384615,0.197242647058824,0.165844174208145,0.149441459276018,0.125742364253394,0.1055217760181,0.106865101809955,0.125049490950226,0.155620757918552,0.187139423076923,0.196556843891403,0.213595871040724,0.225572680995475,0.227679581447964,0.215547228506787,0.224519230769231,0.268827771493213,0.322921380090498,0.350291342952275};

// 2048p
float Res2048_PUs_Distribution_4x4[32] = {0.00088664,0.0039248,0.0085055,0.015268,0.02206,0.027527,0.034622,0.041574,0.05232,0.063131,0.069966,0.079735,0.08983,0.10096,0.11721,0.13596,0.1433,0.1286,0.10769,0.094074,0.086552,0.078698,0.07122,0.063177,0.056957,0.051426,0.041842,0.031376,0.022832,0.014481,0.0059564,0.00088194};
float Res2048_PUs_Distribution_8x8[32] = {0.011144,0.027054,0.041858,0.058135,0.072712,0.082447,0.092371,0.1038,0.12139,0.13958,0.15217,0.16444,0.17165,0.18337,0.20577,0.22836,0.23338,0.21918,0.19834,0.1832,0.17726,0.17427,0.16427,0.14931,0.14195,0.14059,0.12978,0.11127,0.090624,0.067418,0.041114,0.014954};
float Res2048_PUs_Distribution_16x16[32] = {0.069299,0.11462,0.13837,0.15803,0.17388,0.17919,0.18548,0.20852,0.22693,0.2387,0.25513,0.26319,0.26462,0.26913,0.27832,0.28055,0.27079,0.27494,0.27355,0.26255,0.25741,0.26022,0.25768,0.25181,0.2505,0.25816,0.26875,0.26507,0.24292,0.21207,0.1734,0.1123};
float Res2048_PUs_Distribution_32x32[32] = {0.41501,0.40091,0.37462,0.35884,0.35014,0.33891,0.34294,0.36011,0.35105,0.32965,0.32814,0.32393,0.31917,0.30764,0.28021,0.25048,0.24666,0.25892,0.28092,0.29292,0.28949,0.29091,0.29793,0.31447,0.32257,0.3237,0.34382,0.37302,0.39655,0.41547,0.44807,0.52157};
float Res2048_PUs_Distribution_64x64[32] = {0.50366,0.45349,0.43664,0.40973,0.3812,0.37192,0.34459,0.286,0.2483,0.22893,0.19459,0.16871,0.15472,0.13889,0.11849,0.10464,0.10587,0.11836,0.1395,0.16726,0.18928,0.19591,0.2089,0.22123,0.22802,0.22612,0.2158,0.21926,0.24707,0.29056,0.33146,0.35029};

// These variables are assigned according to the video resolution
float *PUs_Cumulative_4x4;
float *PUs_Cumulative_8x8;
float *PUs_Cumulative_16x16;
float *PUs_Cumulative_32x32;
float *PUs_Cumulative_64x64;

float *PUs_Distribution_4x4;
float *PUs_Distribution_8x8;
float *PUs_Distribution_16x16;
float *PUs_Distribution_32x32;
float *PUs_Distribution_64x64;

int *MAX_DEPTH_PER_ROW;

// Ajdust the pointers of PU size distribution according to video resolution.
// Defines a maximum depth for each CTU row (MAX_DEPTH_PER_ROW) depending on hitRate
// The MAX_DEPTH_PER_ROW matrix is used only when statisticalPUSizeReduction is TRUE
void generatePuSizeDistribution(int frameHeight){
    
    switch(frameHeight){
        case 1664:
            PUs_Cumulative_4x4 = Res1664_PUs_Cumulative_4x4;
            PUs_Cumulative_8x8 = Res1664_PUs_Cumulative_8x8;
            PUs_Cumulative_16x16 = Res1664_PUs_Cumulative_16x16;
            PUs_Cumulative_32x32 = Res1664_PUs_Cumulative_32x32;
            PUs_Cumulative_64x64 = Res1664_PUs_Cumulative_64x64;
            MAX_DEPTH_PER_ROW = Res1664_MAX_DEPTH_PER_ROW;
            PUs_Distribution_4x4 = Res1664_PUs_Distribution_4x4;
            PUs_Distribution_8x8 = Res1664_PUs_Distribution_8x8;
            PUs_Distribution_16x16 = Res1664_PUs_Distribution_16x16;
            PUs_Distribution_32x32 = Res1664_PUs_Distribution_32x32;
            PUs_Distribution_64x64 = Res1664_PUs_Distribution_64x64;
            break;
        case 2048:
            PUs_Cumulative_4x4 = Res2048_PUs_Cumulative_4x4;
            PUs_Cumulative_8x8 = Res2048_PUs_Cumulative_8x8;
            PUs_Cumulative_16x16 = Res2048_PUs_Cumulative_16x16;
            PUs_Cumulative_32x32 = Res2048_PUs_Cumulative_32x32;
            PUs_Cumulative_64x64 = Res2048_PUs_Cumulative_64x64;
            MAX_DEPTH_PER_ROW = Res2048_MAX_DEPTH_PER_ROW;
            PUs_Distribution_4x4 = Res2048_PUs_Distribution_4x4;
            PUs_Distribution_8x8 = Res2048_PUs_Distribution_8x8;
            PUs_Distribution_16x16 = Res2048_PUs_Distribution_16x16;
            PUs_Distribution_32x32 = Res2048_PUs_Distribution_32x32;
            PUs_Distribution_64x64 = Res2048_PUs_Distribution_64x64;
            break;
        default:
            cout << "ERROR -- Resolution " << frameHeight << " is not supported" << endl;
            break;
    }
    
    // Number of CTU rows
    int numRows = frameHeight/64;
    
    for(int i=0; i<numRows; i++){
  
        if(PUs_Cumulative_64x64[i] >= hitRate){
            MAX_DEPTH_PER_ROW[i] = 0;
        }
        else if(PUs_Cumulative_32x32[i] >= hitRate){
            MAX_DEPTH_PER_ROW[i] = 1;
        }
        else if(PUs_Cumulative_16x16[i] >= hitRate){
            MAX_DEPTH_PER_ROW[i] = 2;
        }
        else if(PUs_Cumulative_8x8[i] >= hitRate){
            MAX_DEPTH_PER_ROW[i] = 3;
        }
        else if(PUs_Cumulative_4x4[i] >= hitRate){
            MAX_DEPTH_PER_ROW[i] = 4;
        }
        else{
            cout << "ERROR -- UNREACHABLE HIT RATE FOR INTRA PU SIZES" << endl;
        }    
        // cout << "Row " << i << " Max " << MAX_DEPTH_PER_ROW[i];
    }
}